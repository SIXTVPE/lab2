#include <iostream>
#include <complex>
#include <chrono>
#include <cblas.h>
using namespace std;
using namespace std::chrono;

const int N = 2048;

int main() {
single_complex A[N][N], B[N][N], C[N][N];

// генерация случайных матриц
for (int i = 0; i < N; i++) {
for (int j = 0; j < N; j++) {
A[i][j] = single_complex(rand() % 10, rand() % 10);
B[i][j] = single_complex(rand() % 10, rand() % 10);
}
}

// перемножение матриц с помощью cblas_cgemm
auto start_time = high_resolution_clock::now();
cblas_cgemm(CblasRowMajor, CblasNoTrans, CblasNoTrans, N, N, N, &single_complex(1.0, 0.0), &A[0][0], N, &B[0][0], N, &single_complex(0.0, 0.0), &C[0][0], N);
auto end_time = high_resolution_clock::now();

// вывод времени выполнения и производительности
double duration = duration_cast<milliseconds>(end_time - start_time).count() / 1000.0;
double complexity = 2 * pow(N, 3);
double performance = complexity / (duration * 1000000.0);

cout « "Время выполнения: " « duration « " секунд" « endl;
cout « "Производительность: " « performance « " MFlops" « endl;
cout « "Стручков Владислав РПИб-о22";

return 0;
}
